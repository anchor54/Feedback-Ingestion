services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: feedback-ingestion
    volumes:
      - mongodb_data:/data/db

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Application Services
  webhook-service:
    build: .
    container_name: webhook-service
    ports:
      - "3000:3000"
    depends_on:
      - kafka
      - mongodb
      - redis
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/feedback-ingestion
      - KAFKA_BROKERS=kafka:29092
      - REDIS_URL=redis://redis:6379
    command: ["node", "dist/services/webhook/server.js"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  processing-service:
    build: .
    container_name: processing-service
    depends_on:
      - kafka
      - mongodb
      - redis
      - webhook-service
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/feedback-ingestion
      - KAFKA_BROKERS=kafka:29092
      - REDIS_URL=redis://redis:6379
    command: ["node", "dist/services/processing/processor.js"]
    restart: unless-stopped

  polling-service:
    build: .
    container_name: polling-service
    depends_on:
      - kafka
      - mongodb
      - redis
      - processing-service
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/feedback-ingestion
      - KAFKA_BROKERS=kafka:29092
      - REDIS_URL=redis://redis:6379
    command: ["node", "dist/services/polling/pollingService.js"]
    restart: unless-stopped

volumes:
  mongodb_data:
  redis_data: 